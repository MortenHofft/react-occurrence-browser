import React, {Component} from 'react'
import {render} from 'react-dom'
import _ from 'lodash';
import config from './config_simple';

import axios from 'axios';
import OccurrenceBrowser from '../../src'

const style = {
  height: 'calc(100vh - 80px)',
  width: '95%'
};

class Demo extends Component {
  constructor(props) {
    super(props);

    // let testUrl = 'https://api.gbif.org/v1/dataset/24baf0da-60a9-4a13-99d7-a8c860c3cb30';
    // testUrl = 'http://es1.gbif-dev.org/some_fungi/_search';
    // return axios.post(testUrl, {}).then(x => {
    //   console.log(x.data)
    // }).catch(err => {console.log(err)});

  }

  render() {
    return <div>
      {/* <div style={{lineHeight:'20px', padding:'20px', background:'deepskyblue', color: 'white'}}>react-occurrence-browser Demo</div> */}
      <div style={style}>
        <OccurrenceBrowser config={config}/>
      </div>
    </div>
  }
}

render(<Demo/>, document.querySelector('#demo'))

/**
 * You can add custom widgets. If a widget controls a new filter, then you need to define a filter as well.
 * Filter: name (internal identifier), mapping (to ES field), translations (singular, plural, description).
 *        DisplayName: name (internal identifier), function (that returns promise with value), component (react C that returns formated name)
 * 
 * Display name is needed to show the filters in the summary and widgets. There could in theory be display names for something that didn't have a filter I guess. Better make them seperate.
 * If a filter is only used as an implicit background filter, then it isn't needed. If a display name isn't provided, then it won't be shown?
 * 
 * a filter should always come with a display function and component.
 * 
 * widgets: (to help the user add filters and more). nameId, tx.title, tx.description, type(FILTER|SUMMARY)?, <component filter updateFilter />
 * 
 * summary chips. ignore: [fields], custom: function(filter, api) => array of Components (chip like).
 * 
 * displayNames, filters, widgets (+ custom versions of all 3)
 * summaryOverwrites, endpoints, widgetSelect(std + custom), backgroundFilter, 
 * apiHelper: custom handling for specific filters.
 * 
 * displayName: nameId, function(id) => promise.resolve(title, [tooltip]) - a component it autogenerated from this.
 * filters: name (internal identifier), mapping (to ES field), translations (singular, plural, description), displayName(auto taken and required from displayNames, might default to Identity)
 * widgets: nameId, tx.title, tx.description, type(FILTER|SUMMARY)?, <component filter updateFilter /> , filters (it can change - allows for teting that those filters are defined and to auto suggest widget for fields in say table).
 * 
 * omni search needs suggests. and so does some widgets. it makes sense to share them. are a suggest naturally tied to another type?
 * suggests: nameId, function suggest(q, filter, limit). Used for omni search and widgets. takes an optional filter (for omni search there is none) and returns {value, [count, displayTitle, description]} + option to add suggests
 * 
 * order: displayname, suggest, filters, widgets
 * 
 * configurable: 
 *  background filter
 *  omnisearch suggesters,
 *  filter widgets
 *  table columns (default and available)
 *  selected widgets + custom widgets
 *  selected filters + custom filters
 *  custom suggesters
 *  summary chips (ignore and custom)
 *  translation file
 *  ui: showLangSelector? availableLanguages? defaultWidgets, defaultView, endpoints, 
 * 
 * 
 * 
 * create custom configs for the demo so it is easy to switch for testing
 */